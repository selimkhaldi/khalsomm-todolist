/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const after = lab.after;
const expect = Code.expect;
const EventEmitter = require('events').EventEmitter;
const Util = require('util');

const Tracing = require('../../../lib/instrumentation/tracing');
const Proxyquire = require('proxyquire');

after((done) => {

    require('continuation-local-storage').destroyNamespace('sqreen_session');
    done();
});

describe('Instrumentation', () => {

    describe('Tracing', () => {

        it('should raise exceptions', { plan: 3 }, (done) => {

            const MockerTracing = Proxyquire('../../../lib/instrumentation/tracing', {
                '../exception': {
                    report: function (err) {

                        expect(err).to.exist();
                        return Promise.reject(err);
                    }
                }
            });

            const Server = function Server() {

                EventEmitter.apply(this, arguments);
            };
            Util.inherits(Server, EventEmitter);

            const module = { Server };
            MockerTracing.enable(module);
            const server = new module.Server();
            server.addListener('request', (req, res) => {

                expect(req).to.equal('req');
                expect(res).to.equal('res');
                done();
            });

            server.emit('request', 'req', 'res');
        });

        it('should trace calls', { plan: 4 }, (done) => {

            const Server = function Server() {

                EventEmitter.apply(this, arguments);
            };
            Util.inherits(Server, EventEmitter);

            const module = { Server };
            Tracing.enable(module);
            const server = new module.Server();

            const _req = new EventEmitter();
            _req.name = 'req';
            const _res = new EventEmitter();
            _res.name = 'res';

            server.addListener('request', (req, res) => {

                expect(req.name).to.equal('req');
                expect(res.name).to.equal('res');

                const session = require('continuation-local-storage').getNamespace('sqreen_session');

                expect(session.get('req').name).to.equal('req');
                expect(session.get('res').name).to.equal('res');
                done();
            });

            server.emit('request', _req, _res);
        });

        it('should ignore non request events', { plan: 4 }, (done) => {

            const Server = function Server() {

                EventEmitter.apply(this, arguments);
            };
            Util.inherits(Server, EventEmitter);

            const module = { Server };
            Tracing.enable(module);
            const server = new module.Server();

            const _req = new EventEmitter();
            _req.name = 'req';
            const _res = new EventEmitter();
            _res.name = 'res';

            server.addListener('request0', (req, res) => {

                expect(req.name).to.equal('req');
                expect(res.name).to.equal('res');

                const session = require('continuation-local-storage').getNamespace('sqreen_session');

                expect(session.get('req')).to.not.exist();
                expect(session.get('res')).to.not.exist();
                done();
            });

            server.emit('request0', _req, _res);
        });
    });
});

