/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;
const afterEach = lab.afterEach;

const Proxyquire = require('proxyquire');
const Fs = require('fs');
const Module = require('module');
const load = Module._load;

afterEach((done) => {

    Module._load = load;
    done();
});

describe('moduleHijacker', () => {

    describe('enable', () => {

        it('should catch the loading of a dependency', { plan: 2 }, (done) => {

            const MockedModuleHijacker = Proxyquire('../../../lib/instrumentation/moduleHijacker', {
                './moduleIdentity': {
                    scan: function () {

                        return {
                            core: false,
                            internal: false,
                            forceHj: true
                        };
                    }
                },
                './patcher': {
                    patchModule: function (loadedModule) {

                        expect(loadedModule).to.exist();
                        expect(loadedModule.timeout).to.exist();
                        done();
                    }
                }
            });

            MockedModuleHijacker.enable();
            require('../../../lib/util');
        });

        it('should catch the loading of a dependency and prove specific instrumentation', { plan: 1 }, (done) => {

            const MockedModuleHijacker = Proxyquire('../../../lib/instrumentation/moduleHijacker', {
                './moduleIdentity': {
                    scan: function () {

                        return {
                            core: false,
                            internal: false,
                            forceHj: true
                        };
                    }
                },
                './hooks': {
                    '../../../lib/util': function (identity) {

                        expect(identity.core).to.be.false();
                        done();
                    }
                }
            });

            MockedModuleHijacker.enable();
            require('../../../lib/util');
        });

        it('should catch the loading of an internal module', { plan: 1 }, (done) => {

            const MockedModuleHijacker = Proxyquire('../../../lib/instrumentation/moduleHijacker', {
                './moduleIdentity': {
                    scan: function () {

                        return {
                            core: false,
                            internal: true
                        };
                    }
                },
                './patcher': {
                    patchModule: function () {

                        done(new Error('should not have been called'));
                    }
                }
            });

            MockedModuleHijacker.enable();
            const res = require('../../../lib/util');
            expect(res.timeout).to.exist();
            done();
        });

        it('should handle thrown error in patcher', { plan: 2 }, (done) => {

            const MockedModuleHijacker = Proxyquire('../../../lib/instrumentation/moduleHijacker', {
                './moduleIdentity': {
                    scan: function () {

                        return {
                            core: false,
                            internal: false
                        };
                    }
                },
                './patcher': {
                    patchModule: function () {

                        expect(true).to.be.true(); // ensure call
                        throw new Error('my error');
                    }
                }
            });

            MockedModuleHijacker.enable();
            const res = require('util');
            expect(res.deprecate).to.exist();
            done();
        });

        it('should catch the loading of a dependency and cache it', { plan: 3 }, (done) => {

            const MockedModuleHijacker = Proxyquire('../../../lib/instrumentation/moduleHijacker', {
                './moduleIdentity': {
                    scan: function (request) {

                        return {
                            core: false,
                            internal: false,
                            name: request
                        };
                    }
                },
                './patcher': {
                    patchModule: function (loadedModule, identity) {

                        if (identity.name === 'http') {
                            expect(loadedModule).to.exist();
                        }
                        loadedModule.cached = true;
                        return loadedModule;
                    }
                }
            });

            MockedModuleHijacker.enable();
            require('http');
            const res = require('http');
            expect(res.Server).to.exist();
            expect(res.cached).to.be.true();
            done();
        });

        it('should not catch the loading of a dependency and cache it', { plan: 2 }, (done) => {

            const MockedModuleHijacker = Proxyquire('../../../lib/instrumentation/moduleHijacker', {
                './moduleIdentity': {
                    scan: function () {

                        return {
                            core: false,
                            internal: false
                        };
                    }
                },
                './patcher': {
                    patchModule: function () {

                        done(new Error('should not have been called'));
                    }
                }
            });

            MockedModuleHijacker.enable();
            ;
            const res = require('../../../lib/util');
            expect(res.timeout).to.exist();
            expect(res.cached).to.not.exist();
            done();
        });
    });

    describe('enable and circular dependencies', () => {

        it('should catch the 2 modules loading', { plan: 5 }, (done) => {

            const MockedModuleHijacker = Proxyquire('../../../lib/instrumentation/moduleHijacker', {
                './moduleIdentity': {
                    scan: function () {

                        return {
                            core: false,
                            internal: false,
                            forceHj: true
                        };
                    }
                },
                './patcher': {
                    patchModule: function (loadedModule) {

                        expect(loadedModule).to.exist();
                        loadedModule.cached = true;
                        return loadedModule;
                    }
                }
            });

            MockedModuleHijacker.enable();

            const script1 = `
require('./script2');
module.exports.v1 = 1;
            `;

            const script2 = `
require('./script1');
module.exports.v2 = 2;
            `;

            Fs.writeFileSync('./test/lib/instrumentation/script1.js', script1);
            Fs.writeFileSync('./test/lib/instrumentation/script2.js', script2);

            const s2 = require('./script2');

            expect(s2.v2).to.equal(2);

            const s1 = require('./script1');

            expect(s1.v1).to.equal(1);


            Fs.unlinkSync('./test/lib/instrumentation/script1.js');
            Fs.unlinkSync('./test/lib/instrumentation/script2.js');

            done();
        });
    });
});
