/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Fs = require('fs');
const Path = require('path');

const Rimraf = require('rimraf');

const Reader = require('../../../lib/package-reader');

describe('package-reader', () => {

    describe('transFormPackage', () => {

        it('should do nothing when not argument is given', { plan: 1 }, (done) => {

            const result = Reader.transFormPackage();
            expect(result).to.not.exist();
            done();
        });

        it('should transform a package', { plan: 8 }, (done) => {

            const input = {
                name: 'name',
                version: '5',
                dist: {},
                repository: {},
                _requiredBy: ['/lab']
            };

            const output = Reader.transFormPackage(input);

            expect(output).to.exist();
            expect(output.name).to.equal('name');
            expect(output.version).to.equal('5');
            expect(output.source).to.exist();
            expect(output.source.dist).to.exist();
            expect(output.source.repository).to.exist();
            expect(output.requiredBy).to.be.an.array();
            expect(output.requiredBy).to.have.length(1);
            done();
        });
    });

    describe('readPackage', () => {

        it('should smoothly read the content of a json file', { plan: 2 }, (done) => {

            const json = { hello: 'world' };
            Fs.writeFileSync('./tmp.json', JSON.stringify(json));

            const result = Reader.readPackage(Path.join(process.cwd(),'tmp.json'));

            expect(result).to.exist();
            expect(result.hello).to.equal('world');

            Fs.unlinkSync('./tmp.json');
            done();
        });

        it('should smoothly read the content of a json file when deps', { plan: 2 }, (done) => {

            const json = { hello: 'world', dependencies: { 'a.1': 1 } };
            Fs.writeFileSync('./tmp.json', JSON.stringify(json));

            const result = Reader.readPackage(Path.join(process.cwd(),'tmp.json'));

            expect(result).to.exist();
            expect(result.hello).to.equal('world');

            Fs.unlinkSync('./tmp.json');
            done();
        });

        it('should smoothly read the content of a json file when devDeps', { plan: 2 }, (done) => {

            const json = { hello: 'world', devDependencies: { 'a.1': 1 } };
            Fs.writeFileSync('./tmp.json', JSON.stringify(json));

            const result = Reader.readPackage(Path.join(process.cwd(),'tmp.json'));

            expect(result).to.exist();
            expect(result.hello).to.equal('world');

            Fs.unlinkSync('./tmp.json');
            done();
        });

        it('should not read the content of a malformed json file', { plan: 1 }, (done) => {

            Fs.writeFileSync('./tmp.json', '{');

            const result = Reader.readPackage(Path.join(process.cwd(),'tmp.json'));

            expect(result).to.not.exist();

            Fs.unlinkSync('./tmp.json');
            done();
        });

        it('should not read the content of a non existing file', { plan: 1 }, (done) => {

            const result = Reader.readPackage(Path.join(process.cwd(),'tmp.json'));

            expect(result).to.not.exist();

            done();
        });
    });

    describe('listModules', () => {

        it('should return a rejected promise when the directory does not exist', { plan: 1 }, (done) => {

            Reader.listModules('./fake_directory')
                .then(() => done(new Error('this should have failed')))
                .catch((err) => {

                    expect(err).to.exist();
                    done();
                });
        });

        it('should return a fulfiled promise with the path to the package.json files', { plan: 3 }, () => {

            Fs.mkdirSync('./my_modules');
            Fs.mkdirSync('./my_modules/mod1');
            Fs.writeFileSync('./my_modules/mod1/package.json', JSON.stringify({ name: 'sqreen' }));

            return Reader.listModules('./my_modules')
                .then((list) => {

                    expect(list).to.exist();
                    expect(list).to.be.an.array();
                    expect(list).to.have.length(1);
                })
                .then(() => {

                    return new Promise((resolve) => {

                        Rimraf('./my_modules', () => {

                            return resolve();
                        });
                    });
                });
        });
    });

    describe('getDependencies', () => {

        it('should list the dependencies of sqreen', { plan: 3 }, () => {

            return Reader.getDependencies()
                .then((list) => {

                    expect(list).to.exist();
                    expect(list).to.be.an.array();
                    expect(list.length).to.be.above(200);
                });
        });

        it('should reject and not list the dependencies if \'node_modules\' does not exist', { plan: 1 }, (done) => {

            const baseDir = process.cwd();
            process.chdir('./test');

            Reader.getDependencies()
                .then(() => done(new Error('this should have failed')))
                .catch((x) => {

                    expect(x).to.exist();
                    process.chdir(baseDir);
                    done();
                });
        });
    });

});

