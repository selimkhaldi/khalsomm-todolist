/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Utils = require('../../../../lib/rules/rules-callback/utils');
const Http = require('http');

describe('Utils', () => {

    describe('dropRequest', () => {

        it('should change the arguments', { plan: 5 }, (done) => {

            const args1 = {
                socket: {
                    end: function () {

                        expect(true).to.be.true(); // ensure call
                    }
                }
            };
            const args2 = {
                writeHead: function (code) {

                    expect(code).to.equal(500);
                },
                end: function () {

                    expect(true).to.be.true(); // ensure call
                }

            };

            const args = { '0': null, '1': args1 , '2': args2  };
            Utils.dropRequest(args);
            expect(args[1]).to.be.an.instanceof(Http.IncomingMessage);
            expect(args[1].method).to.equal('OPTIONS');
            done();
        });
    });

    describe('getLookableClaims', () => {

        it('should get a new version of request object', { plan: 1 }, (done) => {

            const input = { query: 'aaa', socket: {}, connection: { remoteAddress: '127.0.0.1' } };
            const output = { query: 'aaa', connection: { remoteAddress: '127.0.0.1' } };
            expect(Utils.getLookableClaims(input)).to.equal(output);
            done();
        });

        it('should get a new version of request object with sqreen hold', { plan: 1 }, (done) => {

            const input = { __sqreen: { lookup: { a: 1 } } };
            const output = { __sqreen_lookup: { a:1 } };
            expect(Utils.getLookableClaims(input)).to.equal(output);
            done();
        });

        it('should get a new version of request object with sqreen hold', { plan: 1 }, (done) => {

            const input = { __sqreen: { lookup: { a: 1 }, hapi: [] } };
            const output = { __sqreen_lookup: { a:1 } };
            expect(Utils.getLookableClaims(input)).to.equal(output);
            done();
        });


        it('should get a new version of request object with sqreen hold and hapi stuff', { plan: 1 }, (done) => {

            const input = { __sqreen: { hapi: [{ value: { params: 'a', query: 'b', payload: 'c' } }] } };
            const output = { __sqreen_lookup: { hapi: { params: 'a', query: 'b', payload: 'c' } } };
            expect(Utils.getLookableClaims(input)).to.equal(output);
            done();
        });
    });
});
