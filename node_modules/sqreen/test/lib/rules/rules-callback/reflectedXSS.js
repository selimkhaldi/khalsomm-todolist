/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

describe('reflectedXSS', () => {

    describe('pre', () => {

        it('should find a xss', { plan: 3 }, (done) => {

            const pre = require('../../../../lib/rules/rules-callback/reflectedXSS').getCbs({ data: { values: ['aa', 'bb'] } }).pre;

            const input = [
                ['aa'],
                null,
                { data: { values: ['aa', 'bb'] } },
                null,
                { req: { stuff: 'oo', params: { id: 'aa' } } }
            ];
            const output = pre.apply(null, input);
            expect(output).to.exist();
            expect(output.record).to.exist();
            expect(output.record).to.equal({ found: 'aa', payload: 'aa' });

            done();
        });

        it('should not escape because of block mode but find a xss', { plan: 3 }, (done) => {

            const pre = require('../../../../lib/rules/rules-callback/reflectedXSS').getCbs({ data: { values: ['aa', 'bb'] }, block: false }).pre;

            const input = [
                ['aa'],
                null,
                { data: { values: ['aa', 'bb'] }, block: false },
                null,
                { req: { stuff: 'oo', params: { id: 'aa' } } }
            ];
            const output = pre.apply(null, input);
            expect(output).to.exist();
            expect(output.record).to.exist();
            expect(output.record).to.equal({ found:'aa', payload: 'aa' });

            done();
        });

        it('should not do anything s', { plan: 3 }, (done) => {

            const pre = require('../../../../lib/rules/rules-callback/reflectedXSS').getCbs({ data: { values: ['bb'] }, block: true }).pre;

            const input = [
                ['< " > &'],
                null,
                { data: { values: ['bb'] }, block: true },
                null,
                { req: { stuff: 'oo', params: { } } }
            ];


            const output = pre.apply(null, input);
            expect(output).to.exist();
            expect(output.record).to.not.exist();
            expect(input[0][0]).to.equal('< " > &');
            done();
        });

        it('should escape but not find a xss', { plan: 3 }, (done) => {

            const pre = require('../../../../lib/rules/rules-callback/reflectedXSS').getCbs({ data: { values: ['bb'] }, block: true }).pre;

            const input = [
                ['< " > &'],
                null,
                { data: { values: ['bb'] }, block: true },
                null,
                { req: { stuff: 'oo', params: { id: '< " > &' } } }
            ];


            const output = pre.apply(null, input);
            expect(output).to.exist();
            expect(output.record).to.not.exist();

            expect(input[0][0]).to.equal('&lt; &quot; &gt; &amp;');


            done();
        });

        it('should not find an xss', { plan: 2 }, (done) => {

            const pre = require('../../../../lib/rules/rules-callback/reflectedXSS').getCbs({}).pre;

            const input2 = [
                ['aae'],
                null,
                null,
                null,
                { req: { stuff: 'oo', params: { id: 'aa' } } }
            ];
            const output2 = pre.apply(null, input2);
            expect(output2).to.exist();
            expect(output2.record).to.not.exist();

            done();
        });

        it('should not find an xss again', { plan: 1 }, (done) => {

            const pre = require('../../../../lib/rules/rules-callback/reflectedXSS').getCbs().pre;
            const input3 = [
                ['aa'],
                null,
                {},
                null,
                { req: { stuff: 'oo', params: { id: 'aa' } } }
            ];

            expect(pre.apply(null, input3)).to.equal({});
            done();
        });

        it('should not find an xss again', { plan: 1 }, (done) => {

            const pre = require('../../../../lib/rules/rules-callback/reflectedXSS').getCbs({ data: {} }).pre;
            const input3 = [
                ['aa'],
                null,
                { data: {} },
                null,
                { req: { stuff: 'oo', params: { id: 'aa' } } }
            ];

            expect(pre.apply(null, input3)).to.equal({});
            done();

        });
    });
});
