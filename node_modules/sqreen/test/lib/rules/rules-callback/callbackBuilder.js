/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const CallbackBuilder = require('../../../../lib/rules/rules-callback/callbackBuilder');

describe('CallbackBuilder', () => {

    describe('_bindThis', () => {

        it('should return nothing', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('')).to.not.exist();
            done();
        });

        it('should return nothing for an unknown key', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#aaaa')).to.not.exist();
            done();
        });

        it('should return a string', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('\'hello\'')).to.equal('hello');
            done();
        });

        it('should return an integer', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('42')).to.equal(42);
            done();
        });

        it('should return data', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data', null, null, null, { data: 'hello' }, null, {})).to.equal('hello');
            done();
        });

        it('should return subdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\']', null, null, null, { data: { value: 'hello' } })).to.equal('hello');
            done();
        });

        it('should return subsubdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\'][\'sub\'][0]', null, null, null, { data: { value: { sub: ['hello'] } } })).to.equal('hello');
            done();
        });

        it('should return subsubdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\'][\'sub\'][\'a\']', null, null, null, { data: { value: { sub: 'hello' } } })).to.equal('hello');
            done();
        });

        it('should return subsubdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'headers\'][\'user-agent\']', null, null, null, { data: { headers: { 'user-agent': 'hello' } } })).to.equal('hello');
            done();
        });

        it('should return a stacktrace', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.caller')).to.contains('/test/lib/rules/rules-callback/callbackBuilder');
            done();
        });

        it('should take the remote ip address from standard location', { plan: 3 }, (done) => {

            expect(CallbackBuilder._bindThis('#.client_ip', null, null, null, null, null, { headers: { }, connection: { remoteAddress: '100.0.0.1' } })).to.equal('100.0.0.1');
            expect(CallbackBuilder._bindThis('#.client_ip', null, null, null, null, null, { connection: { remoteAddress: '100.0.0.1' } })).to.equal('100.0.0.1');
            expect(CallbackBuilder._bindThis('#.client_ip', null, null, null, null, null, { connection: { } })).to.equal('');
            done();
        });

        it('should take the remote ip address from x-forwarded-for', { plan: 2 }, (done) => {

            expect(CallbackBuilder._bindThis('#.client_ip', null, null, null, null, null, { headers: { 'x-forwarded-for': '127.0.0.1, 100.0.0.2' }, connection: { remoteAddress: '100.0.0.1' } })).to.equal('100.0.0.2');
            expect(CallbackBuilder._bindThis('#.client_ip', null, null, null, null, null, { headers: { 'x-forwarded-for': '100.0.0.2' } })).to.equal('100.0.0.2');
            done();
        });
    });

    describe('_bindAccessors', () => {

        it('should binf a list of accessors', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindAccessors(['#.args[0]', '\'{}\'', '#.rv', 'function () {}'], ['hello'], 'world', {}, {})).to.equal(['hello', '{}', 'world']);
            done();
        });
    });

    describe('_build', () => {

        it('should build a simple callback without return value', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['function () {}']);
            expect(result).to.exist();
            expect(result()).to.not.exist();
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return x + 1; }']);
            expect(result).to.exist();
            expect(result([1])).to.equal(2);
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return { status: \'skip\' }; }']);
            expect(result).to.exist();
            expect(result([1], null, { block: true })).to.equal({ status: 'skip' });
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return { status: \'skip\' }; }']);
            expect(result).to.exist();
            expect(result([1], null, { block: false })).to.equal({ status: null });
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return; }']);
            expect(result).to.exist();
            expect(result([1], null, { block: false })).to.not.exist();
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return { status: null }; }']);
            expect(result).to.exist();
            expect(result([1], null, { block: true })).to.equal({ status: null });
            done();
        });

        it('should build a simple callback with call and new rv', { plan: 2 }, (done) => {

            const f0 = CallbackBuilder._build(['#.rv', 'function (x) { return x + 10; }']);
            const fa = CallbackBuilder._build(['function () { return { call: \'f0\', data: 1 }; }'], { f0 });
            expect(fa).to.exist();
            expect(fa(null, null, {}, null)).to.equal(11);
            done();
        });

        it('should build a simple callback with call and new args', { plan: 2 }, (done) => {

            const f0 = CallbackBuilder._build(['#.args', 'function (x) { return x + 10; }']);
            const fa = CallbackBuilder._build(['function () { return { call: \'f0\', args: 1 }; }'], { f0 });
            expect(fa).to.exist();
            expect(fa(null, null, {}, null)).to.equal(11);
            done();
        });
    });

    describe('getCbs', () => {

        it('should build the callbacks of a rule', { plan: 3 }, (done) => {

            const result = CallbackBuilder.getCbs({
                callbacks: {
                    nodejs: {
                        pre: ['function () { return { call: \'f0\', args: 1 }; }'],
                        f0: ['#.args', 'function (x) { return x + 10; }']
                    }
                }
            });

            expect(result).to.exist();
            expect(result.pre).to.exist();
            expect(result.pre(null, null, {}, null, {})).to.equal(11);
            done();
        });

        it('should fail to build the callbacks of a rule', { plan: 1 }, (done) => {

            const result = CallbackBuilder.getCbs({
                callbacks: {
                    pre: ['function () { return { call: \'f0\', args: 1 }; }'],
                    f0: ['#.args', 'function (x) { return x + 10; ']
                }
            });

            expect(result).to.not.exist();
            done();
        });
    });
});
