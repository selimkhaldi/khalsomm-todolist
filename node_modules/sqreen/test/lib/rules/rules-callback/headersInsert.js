/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const HeaderInsert = require('../../../../lib/rules/rules-callback/headersInsert');
const Http = require('http');


const getAsArguments = function () {

    return arguments;
};


describe('HeaderInsert', () => {

    describe('getPost', () => {

        it('should return a post if the rule is well formed', { plan: 11 }, (done) => {

            delete Http.ServerResponse.__original;
            const post = HeaderInsert.getCbs().post;
            expect(post).to.exist();
            expect(post).to.be.a.function();

            const serverResponse = new Http.ServerResponse({ method: 'GET' });

            const args = getAsArguments('request', null, serverResponse);

            post(args, null);
            post(args, null, {});
            post(args, null, { data: {} });

            expect(serverResponse._headers).to.not.exist();

            post(args, null, { data: { values: [['X-1', '1'], ['X-2', '2']] } });

            expect(serverResponse._headers).to.exist();
            expect(serverResponse._headers['x-1']).to.equal('1');
            expect(serverResponse._headers['x-2']).to.equal('2');
            expect(serverResponse._headerNames).to.equal({ 'x-1': 'X-1', 'x-2': 'X-2' });

            post(getAsArguments('request', null, null), null,  { data: { values: [['X-1', '1'], ['X-2', '2']] } });
            const args2 = getAsArguments('request_0', null, serverResponse);
            post(args2, null, { data: { values: [['X-1', '1'], ['X-2', '2']] } });
            expect(serverResponse._headers).to.exist();
            expect(serverResponse._headers['x-1']).to.equal('1');
            expect(serverResponse._headers['x-2']).to.equal('2');
            expect(serverResponse._headerNames).to.equal({ 'x-1': 'X-1', 'x-2': 'X-2' });

            done();
        });


        it('should return a post if the rule is well formed and Http patched', { plan: 11 }, (done) => {

            Http.ServerResponse.__original = Http.ServerResponse;
            const post = HeaderInsert.getCbs().post;
            expect(post).to.exist();
            expect(post).to.be.a.function();

            const serverResponse = new Http.ServerResponse({ method: 'GET' });

            const args = getAsArguments('request', null, serverResponse);

            post(args, null);
            post(args, null, {});
            post(args, null, { data: {} });

            expect(serverResponse._headers).to.not.exist();

            post(args, null, { data: { values: [['X-1', '1'], ['X-2', '2']] } });

            expect(serverResponse._headers).to.exist();
            expect(serverResponse._headers['x-1']).to.equal('1');
            expect(serverResponse._headers['x-2']).to.equal('2');
            expect(serverResponse._headerNames).to.equal({ 'x-1': 'X-1', 'x-2': 'X-2' });

            post(getAsArguments('request', null, null), null, { data: { values: [['X-1', '1'], ['X-2', '2']] } });
            const args2 = getAsArguments('request_0', null, serverResponse);
            post(args2, null, { data: { values: [['X-1', '1'], ['X-2', '2']] } });
            expect(serverResponse._headers).to.exist();
            expect(serverResponse._headers['x-1']).to.equal('1');
            expect(serverResponse._headers['x-2']).to.equal('2');
            expect(serverResponse._headerNames).to.equal({ 'x-1': 'X-1', 'x-2': 'X-2' });

            done();
        });

    });
});
