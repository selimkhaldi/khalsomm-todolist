/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Logger = require('../logger');
const Path = require('path');
const Os = require('os');
const Exception = require('../exception');

const Reader = require('../package-reader');
const SqreenPkg = require('../../package.json');

// FIXME: remove me somedays
const noDot$Keys = function (obj) {

    const keys = Object.keys(obj).filter((k) => k.indexOf('.') === -1).filter((k) => k.indexOf('$') === -1);
    const result = {};
    for (let i = 0; i < keys.length; ++i) {
        result[keys[i]] = obj[keys[i]];
    }
    return result;
};

/**
 * internal method
 * build login payload
 */
const buildPayload = module.exports._buildPayload = function (deps) {

    const pkg = Reader.readPackage(Path.join(process.cwd(), 'package.json'));
    Logger.DEBUG('is building the login payload');

    return {
        various_infos: {
            time: new Date(),
            app_name: pkg && pkg.name ? pkg.name : null,
            app_version: pkg && pkg.version ? pkg.version : null,
            declared_dependencies: pkg && pkg.dependencies ? noDot$Keys(pkg.dependencies) : null,
            declared_devdependencies: pkg && pkg.devDependencies ? noDot$Keys(pkg.devDependencies) : null,
            dependencies: deps,
            pid: process.pid,
            ppid: null,
            euid: process.geteuid && process.geteuid(),
            egid: process.getegid && process.getegid(),
            uid: process.getuid && process.getuid(),
            gid: process.getgid && process.getgid(),
            name: process.title
        },
        agent_type: 'nodejs',
        agent_version: SqreenPkg.version,
        os_type: Os.arch() + '-' + Os.type(),
        hostname: Os.hostname(),
        runtime_type: 'node',
        runtime_version: process.version,
        framework_type: '',
        framework_version: null,
        environment: process.env.NODE_ENV
    };
};

module.exports.getPayload = function () {

    return Reader.getDependencies()
        .catch(Exception.report)
        .catch(() => Promise.resolve([]))
        .then((dependencies) => buildPayload(dependencies));
};

