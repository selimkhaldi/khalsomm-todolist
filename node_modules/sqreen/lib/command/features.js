/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Exception = require('../exception');
const EventActions = require('../events/action');
const Event = require('../events');
const Agent = require('../agent');
const DefaultMetrics = require('../metric/default');

const featureHolder = {};

const commands = {
    /*    request_compression: function (value) {

     },*/
    /*    performance_metrics_period: function (value) {

     },*/
    publish_metrics_delay: function (value) {

        Agent.metricLoopStarter(value * 1000);
    },
    heartbeat_delay: function (value) {

        Agent.heartBeatLoopStarter({ firstInterval: value * 1000 });
    },
    batch_size: function (value) {

        if (value < 1){
            EventActions.disableBatch();
            Event.drain();
        }
        else {
            EventActions.enableBatch({ batch_size: value });
        }
    },
    max_staleness: function (value){

        EventActions.enableBatch({ max_staleness: value * 1000 });
    },
    call_counts_metrics_period: function (value) {

        DefaultMetrics.enableCallCount(value);
    }
};

const readParam = function (param) {

    Object.keys(param).forEach((key) => {

        if (!commands[key]) {
            Exception.report(new Error(`no such feature ${key}`)).catch(() => {});
            return;
        }

        commands[key](param[key]);
        featureHolder[key] = param[key];
    });
};

module.exports.change = function (params) {

    const was = Object.assign({}, featureHolder);
    params.map(readParam);
    return { was, now: featureHolder };
};

module.exports.read = function () {

    return featureHolder;
};
