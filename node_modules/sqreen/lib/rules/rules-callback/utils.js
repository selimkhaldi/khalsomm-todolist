/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Http = require('http');

// in the future, this method may not be used if the framework has a specific instrumentation
module.exports.dropRequest = function (args) {

    args[2].writeHead(500);
    args[2].end(); // respond with a 500 error
    args[2]._header = null;
    args[2].finished = true;

    args[2] = new Http.ServerResponse({ method: '' }); // create a new response object for framework to write in

    args[1].socket.end(); // prevent the client from writing in the request socket anymore
    args[1] = new Http.IncomingMessage(args[1].socket); // create a new harmless request object that will be dropped by frameworks
    args[1].method = 'OPTIONS';
};

const keptClaims = ['params', 'query', 'headers', 'body', 'cookies', 'url', 'originalUrl', 'method']; // mostly express here
module.exports.getLookableClaims = function (request) {

    request = request || {};
    const result = {};

    if (request.__sqreen) {
        request.__sqreen.lookup = request.__sqreen.lookup || {};

        // hapi specific code (see https://github.com/hapijs/hapi/blob/master/API.md#request-object)
        // expect return value of ["lib/request.js"]["prototype:request"] attached to session.req.__sqreen.hapi[0].value
        // TODO: attach rule
        if (request.__sqreen.hapi && request.__sqreen.hapi[0] && request.__sqreen.hapi[0].value) {
            request.__sqreen.lookup.hapi = {
                params: request.__sqreen.hapi[0].value.params,
                query: request.__sqreen.hapi[0].value.query,
                // headers: request.__sqreen.hapi.headers, // header already taken from raw request
                payload: request.__sqreen.hapi[0].value.payload
            };
        }

        result.__sqreen_lookup = request.__sqreen.lookup;
    }

    for (let i = 0; i < keptClaims.length; ++i) {
        const key = keptClaims[i];
        if (request[key]) {
            result[key] = request[key];
        }
    }

    if (request.connection) {
        result.connection = {};
        result.connection.remoteAddress = request.connection.remoteAddress;
    }

    return result;
};
