/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
/**
 * This script is to be run at startup, therefore synchronous operations are permitted
 */
'use strict';
const Logger = require('../logger');
const Path = require('path');
const Fs = require('fs');

const RRdir = require('./r-readdir');
// TODO: idea: get current module and explore its paths to find the dependency root and th package.json file
// TODO: ignore sqreen's deps
const listModules = module.exports.listModules = function (root) {

    return new Promise((resolve, reject) => {

        RRdir(root, (err, fileList) => {

            if (err) {
                Logger.ERROR(`Sqreen could not read installed packages: ${err.toString}`);
                return reject(err);
            }

            const result = fileList.filter((file) => file.endsWith('package.json'));

            Logger.DEBUG(`Sqreen has found ${result.length} package.json files in 'node_modules'`);

            return resolve(result);
        });
    });
};

const readPackage = module.exports.readPackage = function (path) {

    let raw;

    try {
        raw = Fs.readFileSync(path, 'utf-8');
    }
    catch (err) {
        Logger.ERROR(`Sqreen could not read the content of ${path}`);
        return;
    }

    let pkg = {};
    try {
        pkg = JSON.parse(raw);
    }
    catch (err) {
        Logger.INFO(`Sqreen could not parse the content of ${path}. Is it a valid JSON file ?`);
        return;
    }

    pkg._sq_path = path;
    return pkg;
};

const transFormPackage = module.exports.transFormPackage = function (pkg) {

    if (!pkg) {
        return;
    }

    return {
        name: pkg.name,
        version: pkg.version,
        homepage: pkg.homepage,
        source: {
            dist: pkg.dist,
            repository: pkg.repository
        },
        requiredBy: pkg._requiredBy, // npm 3+ only
        dependencies: pkg.dependencies,
        devDependencies: pkg.devDependencies,
        path: pkg._sq_path && Path.relative(process.cwd(), pkg._sq_path) // do not disclose the full path but the relative one from the process root dir
    };
};

module.exports.getDependencies = function () {

    const baseDir = process.cwd();
    const baseDirContent = Fs.readdirSync(baseDir);
    if (baseDirContent.indexOf('node_modules') < 0) {
        Logger.ERROR(`Sqreen has not found 'node_modules' directory in ${baseDir}`);
        return Promise.reject(new Error('no \'node_modules\' directory at project root'));
    }

    return listModules(Path.join(baseDir, 'node_modules'))
        .then((pathList) => pathList.map((path) => readPackage(path)).filter((pkg) => !!pkg))
        .then((packageList) => packageList.map((pkg) => transFormPackage(pkg)));
};


