/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Ip = require('ip');

/**
 * return a promise resolved after some time
 * @param time
 * @returns {Promise}
 */
module.exports.timeout = function (time) {

    return new Promise((resolve) => {

        setTimeout(() => resolve(), time);
    });
};

/**
 * ensure that a key path exists in an object
 * @param object
 * @param path
 */
module.exports.createPathInObject = function (object, path) {

    let current = object;
    for (let i = 0; i < path.length; ++i ){
        current[path[i]] = current[path[i]] || {};
        current = current[path[i]];
    }
};

const headerClaims = module.exports.headerClaims = ['remote-addr', 'via', 'x-cluster-client-ip', 'x-forwarded', 'x-real-ip', 'client-ip', 'x-forwarded-for'];
module.exports.getClientIpFromRequest = function (req) {

    if (!req) {
        return;
    }
    const headers = req.headers || {};
    const remote = req.connection && req.connection.remoteAddress;
    const foundHeader = headerClaims.find((a) => !!headers[a], '');
    let foundValue;
    if (foundHeader) {
        foundValue = headers[foundHeader].split(',').pop().trim();
    }
    return foundValue || remote;
};

module.exports.getXFFOrRemoteAddress = function (req) {

    if (!req) {
        return '';
    }
    const header = req.headers && req.headers['x-forwarded-for'] || '';

    if (header && typeof header === 'string') {
        const splitted = header.split(',').map((s) => s.trim()).filter(Boolean);
        for (let i = 0; i < splitted.length; ++i) {

            if (!Ip.isPrivate(splitted[i])) {
                return splitted[i];
            }
        }
    }

    let remote = req.connection && req.connection.remoteAddress || '';

    if (!remote) {
        return '';
    }

    const endRemote = remote.split(':').pop();
    if (endRemote && Ip.isV4Format(endRemote) && Ip.isEqual(remote, endRemote)) {
        remote = endRemote;
    }

    return remote;
};
